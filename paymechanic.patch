Index: app/src/main/res/layout/activity_maps.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/activity_maps.xml b/app/src/main/res/layout/activity_maps.xml
--- a/app/src/main/res/layout/activity_maps.xml	
+++ b/app/src/main/res/layout/activity_maps.xml	(date 1751878316091)
@@ -33,6 +33,7 @@
         android:textColor="#FFFFFF"
         android:textSize="16sp" />
 
+
     <ImageButton
         android:id="@+id/zoomFitButton"
         android:layout_width="wrap_content"
@@ -161,6 +162,62 @@
         android:layout_marginTop="6dp" />
     </RelativeLayout>
 
+    <ImageButton
+        android:id="@+id/shopToggleButton"
+        android:layout_width="48dp"
+        android:layout_height="48dp"
+        android:src="@drawable/ic_shop"
+        android:background="@null"
+        android:layout_gravity="end"
+        android:layout_margin="16dp"
+        android:contentDescription="Open Shop" />
+
+    <LinearLayout
+        android:id="@+id/shopPanel"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="vertical"
+        android:background="#CC000000"
+        android:padding="16dp"
+        android:visibility="gone"
+        android:layout_gravity="bottom">
+
+        <TextView
+            android:id="@+id/coinBalanceText"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:textColor="#FFFF66"
+            android:textSize="18sp"
+            android:layout_marginBottom="12dp" />
+
+        <Button
+            android:id="@+id/buySaltBombBtn"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:text="🧂 Buy Salt Bomb (5,000)"
+            android:background="@drawable/button_translucent_bg"
+            android:textColor="#FFFFFF" />
+
+        <Button
+            android:id="@+id/buyDecoyBtn"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:text="🐚 Buy Decoy Shell (7,500)"
+            android:background="@drawable/button_translucent_bg"
+            android:textColor="#FFFFFF"
+            android:layout_marginTop="8dp" />
+
+        <Button
+            android:id="@+id/buyShieldBtn"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:text="🛡 Buy Shell Shield (10,000)"
+            android:background="@drawable/button_translucent_bg"
+            android:textColor="#FFFFFF"
+            android:layout_marginTop="8dp" />
+    </LinearLayout>
+
     <LinearLayout
         android:id="@+id/minigameMenuPanel"
         android:layout_width="wrap_content"
Index: app/src/main/res/layout/activity_how_to_play.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/activity_how_to_play.xml b/app/src/main/res/layout/activity_how_to_play.xml
--- a/app/src/main/res/layout/activity_how_to_play.xml	
+++ b/app/src/main/res/layout/activity_how_to_play.xml	(date 1751882404949)
@@ -26,7 +26,32 @@
             android:layout_marginTop="16dp"
             android:textColor="#CCCCCC"
             android:textSize="16sp"
-            android:text="Run in real life to stay ahead of the snail.\n\nThe snail is always coming — slowly but surely.\nIt follows your GPS location and never stops.\n\nIf it catches you — you die.\n\nUse power-ups to survive a little longer, but they become less effective as the snail gets faster:\n\n🧂 Salt Bomb\nFreezes the snail in place for 15 seconds.\nEarned by surviving 3 minutes without getting closer.\n\n🐚 Decoy Shell\nDrops a fake player marker to lure the snail away.\nFound by visiting glowing decoy spots on the map.\n\n🛡 Shell Shield\nBlocks one collision — the snail passes through you.\nAwarded after gaining 75+ meters distance in under 2 minutes.\n\nGood luck.\nIt’s slow... but it never, ever stops."
+            android:text="Run in real life to stay ahead of the snail.\n\n
+The snail is always coming — slowly but surely.\n
+It follows your GPS location and never stops.\n\n
+If it catches you — you die.\n\n
+Use power-ups to survive a little longer,\n
+but they become less effective as the snail gets faster.\n\n
+🧂 Salt Bomb\n
+Freezes the snail in place for 15 seconds.\n\n
+🐚 Decoy Shell\n
+Drops a fake player marker to lure the snail away.\n\n
+🛡 Shell Shield\n
+Blocks one collision — the snail passes through you.\n\n
+🛍️ Power-ups can be purchased in the shop\n
+(look for the snail coin icon on your map).\n\n
+But beware... the snail evolves.\n\n
+Every few minutes, it may unleash a new behavior:\n\n
+🫥 Vanish\n
+The snail disappears from the map temporarily.\n\n
+🎭 Fake Snail\n
+It spawns a false marker to mislead you.\n\n
+⚡ Teleport\n
+It jumps forward a short distance without warning.\n\n
+Good luck.\n
+It’s slow…\n
+…but it never, ever stops."
+
             />
 
         <Button
Index: app/src/main/java/com/example/itfollows/GameService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/itfollows/GameService.java b/app/src/main/java/com/example/itfollows/GameService.java
--- a/app/src/main/java/com/example/itfollows/GameService.java	
+++ b/app/src/main/java/com/example/itfollows/GameService.java	(date 1751883536684)
@@ -209,14 +209,44 @@
 
     // You'll need this method or similar from MainActivity
     private float getSnailMoveStepDegreesFromSetting(String speedLabel) {
-        // This should mirror the logic in MainActivity or be configurable
-        switch (speedLabel != null ? speedLabel : "Normal Chase") {
-            case "Snail IRL": return 0.00000025f * (gameTickIntervalMs / 250f); // Scale by tick
-            case "Aggressive Slime Pursuit": return 0.00006f * (gameTickIntervalMs / 250f);
-            case "Normal Chase":
-            default: return 0.00003f * (gameTickIntervalMs / 250f);
+        float baseSpeed;
+
+        switch (speedLabel != null ? speedLabel : "Sluggish Crawl") {
+            case "Sluggish Crawl":            // ~0.03 m/s
+                baseSpeed = 0.000000675f;
+                break;
+            case "Fast Snail":                // ~0.06 m/s
+                baseSpeed = 0.00000135f;
+                break;
+            case "Turtle Speed":              // ~0.1 m/s
+                baseSpeed = 0.00000225f;
+                break;
+            case "Casual Walk":              // ~1.0 m/s
+                baseSpeed = 0.0000225f;
+                break;
+            case "Power Walk":               // ~1.5 m/s
+                baseSpeed = 0.00003375f;
+                break;
+            case "Jogging Snail":            // ~2.5 m/s
+                baseSpeed = 0.00005625f;
+                break;
+            case "Running Snail":            // ~5.0 m/s
+                baseSpeed = 0.0001125f;
+                break;
+            case "Olympic Sprinting Snail":  // ~10.4 m/s
+                baseSpeed = 0.000234f;
+                break;
+            case "Snail Drives Car":         // ~20.0 m/s
+                baseSpeed = 0.00045f;
+                break;
+            default:                         // Fallback to Sluggish Crawl
+                baseSpeed = 0.000000675f;
+                break;
         }
+
+        return baseSpeed * (gameTickIntervalMs / 250f); // Scale relative to tick interval
     }
+
     private boolean checkGameOver() {
         if (snailPosition == null || currentPlayerLocation == null) return false;
 
Index: app/src/main/java/com/example/itfollows/MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/itfollows/MainActivity.java b/app/src/main/java/com/example/itfollows/MainActivity.java
--- a/app/src/main/java/com/example/itfollows/MainActivity.java	
+++ b/app/src/main/java/com/example/itfollows/MainActivity.java	(date 1751883126815)
@@ -116,7 +116,7 @@
 
     private static final int LOCATION_PERMISSION_REQUEST_CODE = 1;
     private float distanceSinceLastReward = 0f;
-    private static final float REWARD_DISTANCE_THRESHOLD_METERS = 5000f; // Adjust as needed
+
     private LatLng lastRewardCheckLocation = null;
     private long gameStartTimeElapsedMillis; // Using SystemClock.elapsedRealtime()
     private float totalSnailDistanceMeters;
@@ -169,6 +169,13 @@
     private boolean isDecoyShellActive;
     private float snailDegreesPerTick = 0f;
     private float snailDegreesPerMillisecond = 0f;
+    private Handler snailAbilityHandler = new Handler();
+    private Runnable snailAbilityRunnable;
+    private final long ABILITY_INTERVAL_MS = 3 * 60 * 1000; // Every 3 minutes
+
+    private Marker fakeSnailMarker;
+    private boolean snailInvisible = false;
+
 
     private void updateSnailIcon() {
         // Implement the logic to update the snail's icon here.
@@ -359,6 +366,25 @@
         double lng = player.longitude * bias + snail.longitude * (1 - bias);
         return new LatLng(lat, lng);
     }
+    private int getSnailCoinBalance() {
+        SharedPreferences prefs = getSharedPreferences("SnailGameState", MODE_PRIVATE); // ✅ MATCHES updateSnailCoinBalance
+        return prefs.getInt("snailCoins", 1_000_000); // default to 1 million only once
+    }
+
+    private TextView coinBalanceText;
+    private LinearLayout shopPanel;
+    private int snailCoinBalance;
+    private void updateCoinDisplay() {
+        coinBalanceText.setText("💰 Snail Coins: " + snailCoinBalance);
+    }
+
+    private void updateSnailCoinBalance(int newAmount) {
+        snailCoinBalance = newAmount;
+        SharedPreferences.Editor editor = getSharedPreferences("SnailGameState", MODE_PRIVATE).edit();
+        editor.putInt("snailCoins", snailCoinBalance);
+        editor.apply();
+        updateCoinDisplay();
+    }
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -373,13 +399,91 @@
             loadGameState();
             startSnailChase();
         }
+        SharedPreferences currencyPrefs = getSharedPreferences("SnailCurrency", MODE_PRIVATE);
+        SharedPreferences.Editor currencyEditor = currencyPrefs.edit();
 
+        if (!currencyPrefs.contains("snailCoins")) {
+            currencyEditor.putInt("snailCoins", 1_000_000);
+            currencyEditor.apply();
+        }
 
         // 🔥 Clear any previous saved game state to force a fresh game
         if (isNewGame) {
             getSharedPreferences("SnailGameState", MODE_PRIVATE).edit().clear().apply();
         }
 
+        snailCoinBalance = getSharedPreferences("SnailGameState", MODE_PRIVATE)
+                .getInt("snailCoins", 1_000_000);
+
+        shopPanel = findViewById(R.id.shopPanel);
+        coinBalanceText = findViewById(R.id.coinBalanceText);
+        updateCoinDisplay();
+
+        ImageButton shopToggle = findViewById(R.id.shopToggleButton);
+        shopToggle.setOnClickListener(v -> {
+            if (shopPanel.getVisibility() == View.VISIBLE) {
+                shopPanel.setVisibility(View.GONE);
+            } else {
+                updateCoinDisplay();
+                shopPanel.setVisibility(View.VISIBLE);
+                shopPanel.bringToFront();
+            }
+        });
+
+        Button buySaltBombBtn = findViewById(R.id.buySaltBombBtn);
+        buySaltBombBtn.setOnClickListener(v -> {
+            int currentCount = powerUpPrefs.getInt("saltBomb", 0);
+            if (currentCount >= 5) {
+                Toast.makeText(this, "Max Salt Bombs reached!", Toast.LENGTH_SHORT).show();
+                return;
+            }
+            if (getSnailCoinBalance() >= 5000) {
+                updateSnailCoinBalance(getSnailCoinBalance() - 5000);
+                powerUpEditor.putInt("saltBomb", currentCount + 1);
+                powerUpEditor.apply();
+                updatePowerUpUI();
+                Toast.makeText(this, "Purchased Salt Bomb!", Toast.LENGTH_SHORT).show();
+            } else {
+                Toast.makeText(this, "Not enough Snail Coins!", Toast.LENGTH_SHORT).show();
+            }
+        });
+
+        Button buyDecoyBtn = findViewById(R.id.buyDecoyBtn);
+        buyDecoyBtn.setOnClickListener(v -> {
+            int currentCount = powerUpPrefs.getInt("decoyShell", 0);
+            if (currentCount >= 5) {
+                Toast.makeText(this, "Max Decoy Shells reached!", Toast.LENGTH_SHORT).show();
+                return;
+            }
+            if (getSnailCoinBalance() >= 7500) {
+                updateSnailCoinBalance(getSnailCoinBalance() - 7500);
+                powerUpEditor.putInt("decoyShell", currentCount + 1);
+                powerUpEditor.apply();
+                updatePowerUpUI();
+                Toast.makeText(this, "Purchased Decoy Shell!", Toast.LENGTH_SHORT).show();
+            } else {
+                Toast.makeText(this, "Not enough Snail Coins!", Toast.LENGTH_SHORT).show();
+            }
+        });
+
+        Button buyShieldBtn = findViewById(R.id.buyShieldBtn);
+        buyShieldBtn.setOnClickListener(v -> {
+            int currentCount = powerUpPrefs.getInt("shellShield", 0);
+            if (currentCount >= 1) {
+                Toast.makeText(this, "You already have a Shell Shield!", Toast.LENGTH_SHORT).show();
+                return;
+            }
+            if (getSnailCoinBalance() >= 10000) {
+                updateSnailCoinBalance(getSnailCoinBalance() - 10000);
+                powerUpEditor.putInt("shellShield", currentCount + 1);
+                powerUpEditor.apply();
+                updatePowerUpUI();
+                Toast.makeText(this, "Purchased Shell Shield!", Toast.LENGTH_SHORT).show();
+            } else {
+                Toast.makeText(this, "Not enough Snail Coins!", Toast.LENGTH_SHORT).show();
+            }
+        });
+
 
         // Zoom button setup
         ImageButton zoomFitButton = findViewById(R.id.zoomFitButton);
@@ -710,6 +814,10 @@
     }
 
     private void spawnSnailAndStartGame() { // Renamed from spawnSnail
+        spawnSnailAtRandomLocation();
+        startSnailChase();
+        startSnailAbilityCycle(); // 👈 Add this
+
         if (currentPlayerLocation == null || mMap == null) {
             Log.e(TAG_MAIN_ACTIVITY, "Cannot spawn snail, player location or map is null.");
             Toast.makeText(this, "Waiting for current location to spawn snail...", Toast.LENGTH_SHORT).show();
@@ -972,8 +1080,8 @@
                 return 0.6f;
             case "Olympic Sprinting Snail":    // ~10.4 m/s
                 return 0.4f;
-            case "Snail Drives Car":           // ~40 m/s
-                return 0.2f;
+            case "Snail Drives Car":           // ~20 m/s
+                return 0.18f;
             default:
                 return 1.0f;
         }
@@ -1000,9 +1108,13 @@
     }
     private void updatePowerUpUI() {
         TextView saltBombLabel = findViewById(R.id.saltBombLabel);
-        TextView decoyShellLabel = findViewById(R.id.shieldLabel);
+        TextView decoyShellLabel = findViewById(R.id.decoyLabel);  // FIXED: was mistakenly set to 'shieldLabel'
         TextView shellShieldLabel = findViewById(R.id.shieldLabel);
 
+        Button buySaltBombBtn = findViewById(R.id.buySaltBombBtn);
+        Button buyDecoyBtn = findViewById(R.id.buyDecoyBtn);
+        Button buyShieldBtn = findViewById(R.id.buyShieldBtn);
+
         int saltBombCount = powerUpPrefs.getInt("saltBomb", 0);
         int decoyShellCount = powerUpPrefs.getInt("decoyShell", 0);
         int shellShieldCount = powerUpPrefs.getInt("shellShield", 0);
@@ -1010,7 +1122,35 @@
         saltBombLabel.setText("🧊 Salt Bomb (" + saltBombCount + "/5)");
         decoyShellLabel.setText("🐚 Decoy Shell (" + decoyShellCount + "/5)");
         shellShieldLabel.setText("🛡️ Shell Shield (" + shellShieldCount + "/1)");
+
+        // Salt Bomb
+        if (saltBombCount >= 5) {
+            buySaltBombBtn.setEnabled(false);
+            buySaltBombBtn.setAlpha(0.5f);
+        } else {
+            buySaltBombBtn.setEnabled(true);
+            buySaltBombBtn.setAlpha(1.0f);
+        }
+
+        // Decoy Shell
+        if (decoyShellCount >= 5) {
+            buyDecoyBtn.setEnabled(false);
+            buyDecoyBtn.setAlpha(0.5f);
+        } else {
+            buyDecoyBtn.setEnabled(true);
+            buyDecoyBtn.setAlpha(1.0f);
+        }
+
+        // Shell Shield
+        if (shellShieldCount >= 1) {
+            buyShieldBtn.setEnabled(false);
+            buyShieldBtn.setAlpha(0.5f);
+        } else {
+            buyShieldBtn.setEnabled(true);
+            buyShieldBtn.setAlpha(1.0f);
+        }
     }
+
 
     private void startGameService() {
         Intent serviceIntent = new Intent(this, GameService.class);
@@ -1128,10 +1268,7 @@
         // 1. Reset power-ups BEFORE starting MainActivity
         SharedPreferences powerUpPrefs = getSharedPreferences("PowerUpInventory", MODE_PRIVATE);
         SharedPreferences.Editor powerUpEditor = powerUpPrefs.edit();
-        powerUpEditor.putInt("saltBomb", 0);
-        powerUpEditor.putInt("decoyShell", 0);
-        powerUpEditor.putInt("shellShield", 0);
-        powerUpEditor.apply();
+        powerUpEditor.clear();
 
         Log.d("MainMenuActivity", "Power-ups reset for new game.");
 
@@ -1473,11 +1610,6 @@
                         float distance = result[0];
                         distanceSinceLastReward += distance;
 
-                        if (distanceSinceLastReward >= REWARD_DISTANCE_THRESHOLD_METERS) {
-                            distanceSinceLastReward = 0f;
-                            rewardRandomPowerUp();
-                            Toast.makeText(MainActivity.this, "🎉 You earned a power-up for walking!", Toast.LENGTH_SHORT).show();
-                        }
                     }
                     lastRewardCheckLocation = currentPlayerLocation;
                     if (mMap != null && !hasSpawnedSnail && mMap.getMyLocation() != null && currentPlayerLocation != null) {
@@ -1554,20 +1686,6 @@
         }
     }
 
-    private void rewardRandomPowerUp() {
-        String[] powerUps = {"saltBomb", "decoyShell", "shellShield"};
-        String[] names = {"Salt Bomb", "Decoy Shell", "Shell Shield"};
-        int i = new Random().nextInt(powerUps.length);
-        String earnedKey = powerUps[i];
-        String earnedName = names[i];
-
-        int count = powerUpPrefs.getInt("saltBomb", 0);
-        powerUpEditor.putInt("saltBomb", count + 1);
-        powerUpEditor.apply();
-
-        Toast.makeText(this, "🎁 You earned a " + earnedName + "!", Toast.LENGTH_SHORT).show();
-    }
-
     private void resetGame() {
         Log.d("ResetGame", "Resetting game state and UI for a new game.");
 
@@ -2083,7 +2201,9 @@
         if (snailMarker != null && hasSpawnedSnail) {
             updateSnailIcon();
         }
-
+        TextView coinBalanceText = findViewById(R.id.coinBalanceText);
+        int balance = getSharedPreferences("SnailCoins", MODE_PRIVATE).getInt("coin_balance", 0);
+        coinBalanceText.setText("🪙 " + balance);
         // Register game over receiver
         LocalBroadcastManager.getInstance(this).registerReceiver(gameOverReceiver,
                 new IntentFilter("GAME_OVER"));
@@ -2227,6 +2347,97 @@
         startActivity(new Intent(this, MainMenuActivity.class));
         finish(); // don't let MainActivity linger in the stack
     }
+    private void startSnailAbilityCycle() {
+        snailAbilityRunnable = new Runnable() {
+            @Override
+            public void run() {
+                triggerRandomSnailAbility();
+                snailAbilityHandler.postDelayed(this, ABILITY_INTERVAL_MS);
+            }
+        };
+        snailAbilityHandler.postDelayed(snailAbilityRunnable, ABILITY_INTERVAL_MS);
+    }
+    private void clearPowerUpInventory() {
+        SharedPreferences.Editor editor = getSharedPreferences("PowerUpInventory", MODE_PRIVATE).edit();
+        editor.clear();  // 🔥 Clears saltBomb, decoyShell, shellShield counts
+        editor.apply();
+    }
+    private void triggerRandomSnailAbility() {
+        Random rand = new Random();
+        int abilityIndex = rand.nextInt(3); // 0 = teleport, 1 = decoy, 2 = vanish
+
+        switch (abilityIndex) {
+            case 0:
+                teleportSnailRandomly();
+                break;
+            case 1:
+                spawnFakeSnail();
+                break;
+            case 2:
+                vanishSnailTemporarily();
+                break;
+        }
+    }
+    private void teleportSnailRandomly() {
+        if (snailPosition == null) return;
+
+        Random rand = new Random();
+        double meters = 40 + rand.nextInt(21); // 40–60 meters
+        double angle = rand.nextDouble() * 2 * Math.PI;
+
+        double latOffset = metersToLatitudeDegrees(meters * Math.sin(angle));
+        double lngOffset = metersToLongitudeDegrees(meters * Math.cos(angle), snailPosition.latitude);
+
+        snailPosition = new LatLng(snailPosition.latitude + latOffset, snailPosition.longitude + lngOffset);
+        if (snailMarker != null) snailMarker.setPosition(snailPosition);
+        Toast.makeText(this, "The snail teleported...", Toast.LENGTH_SHORT).show();
+    }
+    private void spawnFakeSnail() {
+        if (playerPosition == null || mMap == null) return;
+
+        Random rand = new Random();
+        double meters = 60 + rand.nextInt(41); // 60–100 meters
+        double angle = rand.nextDouble() * 2 * Math.PI;
+
+        double latOffset = metersToLatitudeDegrees(meters * Math.sin(angle));
+        double lngOffset = metersToLongitudeDegrees(meters * Math.cos(angle), playerPosition.latitude);
+
+        LatLng fakePosition = new LatLng(playerPosition.latitude + latOffset, playerPosition.longitude + lngOffset);
+        SharedPreferences prefs = getSharedPreferences("GameSettings", MODE_PRIVATE);
+        String selectedSpriteKey = prefs.getString("selectedSnailSprite", "snail_classic");
+
+        int spriteResId = getResources().getIdentifier(selectedSpriteKey, "drawable", getPackageName());
+
+        final Marker[] fakeSnailMarker = new Marker[1];
+        fakeSnailMarker[0] = mMap.addMarker(new MarkerOptions()
+                .position(fakePosition)
+                .icon(BitmapDescriptorFactory.fromResource(spriteResId))
+                .title("???"));
+
+        Toast.makeText(this, "A fake snail appeared...", Toast.LENGTH_SHORT).show();
+
+        // Remove after 60s
+        new Handler().postDelayed(() -> {
+            if (fakeSnailMarker[0] != null) {
+                fakeSnailMarker[0].remove();
+                fakeSnailMarker[0] = null;
+            }
+        }, 60000);
+    }
+    private void vanishSnailTemporarily() {
+        if (snailMarker == null) return;
+
+        snailMarker.setVisible(false);
+        snailInvisible = true;
+
+        Toast.makeText(this, "The snail has vanished...", Toast.LENGTH_SHORT).show();
+
+        new Handler().postDelayed(() -> {
+            if (snailMarker != null) snailMarker.setVisible(true);
+            snailInvisible = false;
+            Toast.makeText(this, "The snail reappeared...", Toast.LENGTH_SHORT).show();
+        }, 20000); // 20 seconds
+    }
 
     // Inside MainActivity.java
     @Override
Index: app/src/main/notes.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/notes.txt b/app/src/main/notes.txt
--- a/app/src/main/notes.txt	
+++ b/app/src/main/notes.txt	(date 1751883521744)
@@ -43,3 +43,15 @@
 
 difficulty patch
     had the effectiveness of powerups increase with difficulty
+    Snail Abilities / Enemy Behavior
+    "Snail Teleport" Power: After 10 minutes, snail has a 1% chance every tick to appear closer.
+    "Snail Splits" Clone Event: Randomly generates a fake snail marker to confuse the player.
+    Snail Mutation at night: Different sprite or behavior after midnight.
+    updated "How to Play"
+
+paymechanic patch
+    added shop feature
+    fixed the max number in inventory
+    fixed fake snail to use actual snail
+    removed rewards for getting powerupse
+    updated private float getSnailMoveStepDegreesFromSetting(String speedLabel) { based on the news speeds we made
\ No newline at end of file
Index: app/build/generated/res/processDebugGoogleServices/values/values.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build/generated/res/processDebugGoogleServices/values/values.xml b/app/build/generated/res/processDebugGoogleServices/values/values.xml
new file mode 100644
--- /dev/null	(date 1751830292328)
+++ b/app/build/generated/res/processDebugGoogleServices/values/values.xml	(date 1751830292328)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="gcm_defaultSenderId" translatable="false">398767941420</string>
+    <string name="google_api_key" translatable="false">AIzaSyDwRq5OQsVRzJQktyjzQsZp5qdvxSGlp8U</string>
+    <string name="google_app_id" translatable="false">1:398767941420:android:17babcc74f5ffcdba26e89</string>
+    <string name="google_crash_reporting_api_key" translatable="false">AIzaSyDwRq5OQsVRzJQktyjzQsZp5qdvxSGlp8U</string>
+    <string name="google_storage_bucket" translatable="false">it-follows-b9be6.firebasestorage.app</string>
+    <string name="project_id" translatable="false">it-follows-b9be6</string>
+</resources>
Index: app/build/generated/res/injectCrashlyticsMappingFileIdDebug/values/com_google_firebase_crashlytics_mappingfileid.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build/generated/res/injectCrashlyticsMappingFileIdDebug/values/com_google_firebase_crashlytics_mappingfileid.xml b/app/build/generated/res/injectCrashlyticsMappingFileIdDebug/values/com_google_firebase_crashlytics_mappingfileid.xml
new file mode 100644
--- /dev/null	(date 1751830292320)
+++ b/app/build/generated/res/injectCrashlyticsMappingFileIdDebug/values/com_google_firebase_crashlytics_mappingfileid.xml	(date 1751830292320)
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources xmlns:tools="http://schemas.android.com/tools">
+<!--
+  This file is automatically generated by Crashlytics to uniquely 
+  identify the mapping file for your Android application.
+
+  Do NOT modify or commit to source control!
+-->
+<string name="com.google.firebase.crashlytics.mapping_file_id" tools:ignore="UnusedResources,TypographyDashes" translatable="false">00000000000000000000000000000000</string>
+</resources>
Index: difficulty.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/difficulty.patch b/difficulty.patch
new file mode 100644
--- /dev/null	(date 1751830585828)
+++ b/difficulty.patch	(date 1751830585828)
@@ -0,0 +1,233 @@
+Index: app/src/main/res/layout/activity_how_to_play.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/app/src/main/res/layout/activity_how_to_play.xml b/app/src/main/res/layout/activity_how_to_play.xml
+--- a/app/src/main/res/layout/activity_how_to_play.xml	
++++ b/app/src/main/res/layout/activity_how_to_play.xml	(date 1751830291361)
+@@ -26,7 +26,33 @@
+             android:layout_marginTop="16dp"
+             android:textColor="#CCCCCC"
+             android:textSize="16sp"
+-            android:text="Run in real life to stay ahead of the snail.\n\nThe snail is always coming — slowly but surely.\nIt follows your GPS location and never stops.\n\nIf it catches you — you die.\n\nUse power-ups to survive a little longer, but they become less effective as the snail gets faster:\n\n🧂 Salt Bomb\nFreezes the snail in place for 15 seconds.\nEarned by surviving 3 minutes without getting closer.\n\n🐚 Decoy Shell\nDrops a fake player marker to lure the snail away.\nFound by visiting glowing decoy spots on the map.\n\n🛡 Shell Shield\nBlocks one collision — the snail passes through you.\nAwarded after gaining 75+ meters distance in under 2 minutes.\n\nGood luck.\nIt’s slow... but it never, ever stops."
++            android:text="Run in real life to stay ahead of the snail.\n\n
++The snail is always coming — slowly but surely.\n
++It follows your GPS location and never stops.\n\n
++If it catches you — you die.\n\n
++Use power-ups to survive a little longer,\n
++but they become less effective as the snail gets faster:\n\n
++🧂 Salt Bomb\n
++Freezes the snail in place for 15 seconds.\n
++Earned by surviving 3 minutes without getting closer.\n\n
++🐚 Decoy Shell\n
++Drops a fake player marker to lure the snail away.\n
++Found by visiting glowing decoy spots on the map.\n\n
++🛡 Shell Shield\n
++Blocks one collision — the snail passes through you.\n
++Awarded after gaining 75+ meters distance in under 2 minutes.\n\n
++But beware... the snail evolves.\n\n
++Every few minutes, it may unleash a new behavior:\n\n
++🫥 Vanish\n
++The snail disappears from the map temporarily.\n\n
++🎭 Fake Snail\n
++It spawns a false marker to mislead you.\n\n
++⚡ Teleport\n
++It jumps forward a short distance without warning.\n\n
++Good luck.\n
++It’s slow…\n
++…but it never, ever stops."
++
+             />
+ 
+         <Button
+Index: app/src/main/java/com/example/itfollows/MainActivity.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/app/src/main/java/com/example/itfollows/MainActivity.java b/app/src/main/java/com/example/itfollows/MainActivity.java
+--- a/app/src/main/java/com/example/itfollows/MainActivity.java	
++++ b/app/src/main/java/com/example/itfollows/MainActivity.java	(date 1751830554033)
+@@ -169,6 +169,13 @@
+     private boolean isDecoyShellActive;
+     private float snailDegreesPerTick = 0f;
+     private float snailDegreesPerMillisecond = 0f;
++    private Handler snailAbilityHandler = new Handler();
++    private Runnable snailAbilityRunnable;
++    private final long ABILITY_INTERVAL_MS = 3 * 60 * 1000; // Every 3 minutes
++
++    private Marker fakeSnailMarker;
++    private boolean snailInvisible = false;
++
+ 
+     private void updateSnailIcon() {
+         // Implement the logic to update the snail's icon here.
+@@ -710,6 +717,10 @@
+     }
+ 
+     private void spawnSnailAndStartGame() { // Renamed from spawnSnail
++        spawnSnailAtRandomLocation();
++        startSnailChase();
++        startSnailAbilityCycle(); // 👈 Add this
++
+         if (currentPlayerLocation == null || mMap == null) {
+             Log.e(TAG_MAIN_ACTIVITY, "Cannot spawn snail, player location or map is null.");
+             Toast.makeText(this, "Waiting for current location to spawn snail...", Toast.LENGTH_SHORT).show();
+@@ -972,8 +983,8 @@
+                 return 0.6f;
+             case "Olympic Sprinting Snail":    // ~10.4 m/s
+                 return 0.4f;
+-            case "Snail Drives Car":           // ~40 m/s
+-                return 0.2f;
++            case "Snail Drives Car":           // ~20 m/s
++                return 0.18f;
+             default:
+                 return 1.0f;
+         }
+@@ -2227,6 +2238,88 @@
+         startActivity(new Intent(this, MainMenuActivity.class));
+         finish(); // don't let MainActivity linger in the stack
+     }
++    private void startSnailAbilityCycle() {
++        snailAbilityRunnable = new Runnable() {
++            @Override
++            public void run() {
++                triggerRandomSnailAbility();
++                snailAbilityHandler.postDelayed(this, ABILITY_INTERVAL_MS);
++            }
++        };
++        snailAbilityHandler.postDelayed(snailAbilityRunnable, ABILITY_INTERVAL_MS);
++    }
++    private void triggerRandomSnailAbility() {
++        Random rand = new Random();
++        int abilityIndex = rand.nextInt(3); // 0 = teleport, 1 = decoy, 2 = vanish
++
++        switch (abilityIndex) {
++            case 0:
++                teleportSnailRandomly();
++                break;
++            case 1:
++                spawnFakeSnail();
++                break;
++            case 2:
++                vanishSnailTemporarily();
++                break;
++        }
++    }
++    private void teleportSnailRandomly() {
++        if (snailPosition == null) return;
++
++        Random rand = new Random();
++        double meters = 40 + rand.nextInt(21); // 40–60 meters
++        double angle = rand.nextDouble() * 2 * Math.PI;
++
++        double latOffset = metersToLatitudeDegrees(meters * Math.sin(angle));
++        double lngOffset = metersToLongitudeDegrees(meters * Math.cos(angle), snailPosition.latitude);
++
++        snailPosition = new LatLng(snailPosition.latitude + latOffset, snailPosition.longitude + lngOffset);
++        if (snailMarker != null) snailMarker.setPosition(snailPosition);
++        Toast.makeText(this, "The snail teleported...", Toast.LENGTH_SHORT).show();
++    }
++    private void spawnFakeSnail() {
++        if (playerPosition == null || mMap == null) return;
++
++        Random rand = new Random();
++        double meters = 60 + rand.nextInt(41); // 60–100 meters
++        double angle = rand.nextDouble() * 2 * Math.PI;
++
++        double latOffset = metersToLatitudeDegrees(meters * Math.sin(angle));
++        double lngOffset = metersToLongitudeDegrees(meters * Math.cos(angle), playerPosition.latitude);
++
++        LatLng fakePosition = new LatLng(playerPosition.latitude + latOffset, playerPosition.longitude + lngOffset);
++
++        if (fakeSnailMarker != null) fakeSnailMarker.remove();
++        fakeSnailMarker = mMap.addMarker(new MarkerOptions()
++                .position(fakePosition)
++                .title("??")
++                .icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_ORANGE)));
++
++        Toast.makeText(this, "A fake snail appeared...", Toast.LENGTH_SHORT).show();
++
++        // Remove after 60s
++        new Handler().postDelayed(() -> {
++            if (fakeSnailMarker != null) {
++                fakeSnailMarker.remove();
++                fakeSnailMarker = null;
++            }
++        }, 60000);
++    }
++    private void vanishSnailTemporarily() {
++        if (snailMarker == null) return;
++
++        snailMarker.setVisible(false);
++        snailInvisible = true;
++
++        Toast.makeText(this, "The snail has vanished...", Toast.LENGTH_SHORT).show();
++
++        new Handler().postDelayed(() -> {
++            if (snailMarker != null) snailMarker.setVisible(true);
++            snailInvisible = false;
++            Toast.makeText(this, "The snail reappeared...", Toast.LENGTH_SHORT).show();
++        }, 20000); // 20 seconds
++    }
+ 
+     // Inside MainActivity.java
+     @Override
+Index: app/src/main/notes.txt
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/app/src/main/notes.txt b/app/src/main/notes.txt
+--- a/app/src/main/notes.txt	
++++ b/app/src/main/notes.txt	(date 1751829737456)
+@@ -43,3 +43,8 @@
+ 
+ difficulty patch
+     had the effectiveness of powerups increase with difficulty
++    Snail Abilities / Enemy Behavior
++    "Snail Teleport" Power: After 10 minutes, snail has a 1% chance every tick to appear closer.
++    "Snail Splits" Clone Event: Randomly generates a fake snail marker to confuse the player.
++    Snail Mutation at night: Different sprite or behavior after midnight.
++    updated "How to Play"
+\ No newline at end of file
+Index: app/build/generated/res/processDebugGoogleServices/values/values.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/app/build/generated/res/processDebugGoogleServices/values/values.xml b/app/build/generated/res/processDebugGoogleServices/values/values.xml
+new file mode 100644
+--- /dev/null	(date 1751830292328)
++++ b/app/build/generated/res/processDebugGoogleServices/values/values.xml	(date 1751830292328)
+@@ -0,0 +1,9 @@
++<?xml version="1.0" encoding="utf-8"?>
++<resources>
++    <string name="gcm_defaultSenderId" translatable="false">398767941420</string>
++    <string name="google_api_key" translatable="false">AIzaSyDwRq5OQsVRzJQktyjzQsZp5qdvxSGlp8U</string>
++    <string name="google_app_id" translatable="false">1:398767941420:android:17babcc74f5ffcdba26e89</string>
++    <string name="google_crash_reporting_api_key" translatable="false">AIzaSyDwRq5OQsVRzJQktyjzQsZp5qdvxSGlp8U</string>
++    <string name="google_storage_bucket" translatable="false">it-follows-b9be6.firebasestorage.app</string>
++    <string name="project_id" translatable="false">it-follows-b9be6</string>
++</resources>
+Index: app/build/generated/res/injectCrashlyticsMappingFileIdDebug/values/com_google_firebase_crashlytics_mappingfileid.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/app/build/generated/res/injectCrashlyticsMappingFileIdDebug/values/com_google_firebase_crashlytics_mappingfileid.xml b/app/build/generated/res/injectCrashlyticsMappingFileIdDebug/values/com_google_firebase_crashlytics_mappingfileid.xml
+new file mode 100644
+--- /dev/null	(date 1751830292320)
++++ b/app/build/generated/res/injectCrashlyticsMappingFileIdDebug/values/com_google_firebase_crashlytics_mappingfileid.xml	(date 1751830292320)
+@@ -0,0 +1,10 @@
++<?xml version="1.0" encoding="utf-8"?>
++<resources xmlns:tools="http://schemas.android.com/tools">
++<!--
++  This file is automatically generated by Crashlytics to uniquely 
++  identify the mapping file for your Android application.
++
++  Do NOT modify or commit to source control!
++-->
++<string name="com.google.firebase.crashlytics.mapping_file_id" tools:ignore="UnusedResources,TypographyDashes" translatable="false">00000000000000000000000000000000</string>
++</resources>
diff --git a/app/src/main/res/drawable/ic_shop.png b/app/src/main/res/drawable/ic_shop.png
new file mode 100644
index 0000000000000000000000000000000000000000..c8652ad4c995e637843cb8ff3e2fde5f082db596
GIT binary patch
literal 5878
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
M07*qoM6N<$f`sFN`v3p{

